#!/usr/bin/env bash

# config. 

# Where to store temporaries

Here="$PWD"
Var="$Here/var"

Lib="$Var/lib"
Doc="$Var/doc"
Tmp="$Var/tmp"

# Options for file editting

FileHeader='# /* vim: set filetype=awk ts=2 sw=2 sts=2 expandtab: */'

#
Awk="`which gawk`"
Vim="/usr/local/bin/vim"

# end config
#---------------------------------

banner() { cat<<'EOF'
         ||    
         ||    
        _;|    
       /__3    
      / /||    
     / / // .--.    
     \ \// / (OO)    
      \//  |( _ )    
      // \__/`-'\__    
     // \__      _ \    
 _.-'/    | ._._.|\ \    
(_.-'     |      \ \ \    
   .-._   /    o ) / /    
  /_ \ \ /   \__/ / /    
    \ \_/   / /  E_/    
     \     / /    
      `-._/-' :F_P:    
    
EOF
}
help() { ## # show options
  banner
  printf "APE v0.2\n"
  printf "(c) 2018, tim@menzies.us, BSD (2-clause)"
  printf "\n\noptions:\n"
  grep '{ ##' $0  | sort | $Awk '
  BEGIN  {FS="#"}
  /grep/ { next}
         { gsub(/[^a-zA-Z0-9_]/,"",$1)
	   printf("  %-10s%-8s%s\n",$1,$3,$4)}'
}
ok() {
  $0 run $1
}

twins() {
  stem=$1
  if [ ! -f "${stem}.ape" ]; then cat <<-EOF > "${stem}.ape"
	$FileHeader
	@include "ape0"
	
	# ${stem}.ape 

	EOF
	echo "# Made ${stem}.ape"
  fi
  if [ ! -f "${stem}ok.ape" ]; then cat <<-EOF > "${stem}ok.ape"
	$FileHeader
	@include "${stem}"

	function _test1(f) {
	   is(f,1,1)
	}
	BEGIN {
  	   srand(1)
	   tests("$stem", "_test1")
	}
	EOF
	echo "# Made ${stem}ok.ape"
  fi
}
_ape2awk() {
  $Awk '
BEGIN {In=1}

gsub(/^\"\"\"/,"") { In =  1 - In  }
                   { pre  = In ? "" : "# " }
In {
    print pre gensub(/\.([^0-9])([a-zA-Z0-9_]*)/, 
                    "[\"\\1\\2\"]", "g", $0)
    next }
   {
    print pre $0
   }
' -
}
gitignore() { ## # add a gitignore statement
  if [ ! -f .gitignore ]; then cat <<-EOF > .gitignore
	.DS_Store
	# vim stuff
	[._]*.s[a-w][a-z]
	[._]s[a-w][a-z]
	*.un~
	Session.vim
	.netrwhist
	*~
	# ape stuff
	awkprof.out
	awkvars.out
	var
	EOF
  fi
}
ape0() { 
  if [ ! -f "ape0.ape" ]; then cat<<-'EOF'> ape0.ape
	# /* vim: set filetype=awk ts=2 sw=2 sts=2 expandtab: */
	
	# ----------------------------------------
	# structs
	
	function new(i)      { split("",i,"") }
	function Object(i)   { new(i); i["oid"] = ++OID }
	
	function has(lst,key,fun) {
	  lst[key][SUBSEP]
	  split("",lst[key],"")
	  if (fun) @fun(lst[key])
	}
	function have( lst,key,fun,a) { 
	  has(lst,key); @fun(lst[key],a) }
	function haves(lst,key,fun,a,b) { 
		has(lst,key); @fun(lst[key],a,b) }
	function have2(lst,key,fun,a,b,c) { 
		has(lst,key); @fun(lst[key],a,b,c) }
	function have3(lst,key,fun,a,b,c,d) { 
		has(lst,key); @fun(lst[key],a,b,c,d) }
	function have4(lst,key,fun,a,b,c,d,e) { 
		has(lst,key); @fun(lst[key],a,b,c,d,e) }
	
	# ---------------------------------------
	# tests
	
	function tests(what, all,   one,a,i,n) {
	   n = split(all,a,",")
	   print " "
	   print "#--- " what " -----------------------"
	   for(i=1;i<=n;i++) {
	     one = a[i]
	     @one(one)
	}}
	function is(f,got,want,    pre) {
	  if (want == "") want=1
	  if (want == got)
	    pre="#TEST:\tPASSED"
	  else
	    pre="#TEST:\tFAILED"
	  print( pre "\t" f "\t" want "\t" got )
	}
	EOF
  fi
}
ed() { ## FILE # edit a .ape file
   cat<<-EOF> $Tmp/vimrc 
	set backupdir-=.
	set backupdir^=~/tmp,/tmp
	set nocompatible 
	filetype plugin indent on
	set modelines=3
	set scrolloff=3
	set autoindent
	set visualbell
	set backspace=indent,eol,start
	set laststatus=2
	set splitbelow
	set mouse=a
	set title
	set number
	autocmd BufEnter * silent! lcd %:p:h
	set nohlsearch
	set showmatch
	set matchtime=15
	set background=light
	set syntax=on
	syntax enable
	set ignorecase
	set incsearch
	set smartcase
	set showmatch
	colorscheme zellner
	EOF
  $Vim -u "$Tmp/vimrc" $*
}
run() { # runs a .ape file
  prep
  file=$1
  Built="$Lib/$file.awk"
  shift
  AWKPATH=$Lib                              \
      $Awk --profile="$Tmp/${file}.profile"   \
           --dump-variables="$Tmp/${file}.vars" \
           -f $Built "$@"
  if [ -f "$Tmp/${file}.vars" ]; then
    $Awk '/[A-Z][A-Z]/ {next} {print "W> rogue local: ",$0}' $Tmp/${file}.vars
  fi
}
zap() {
  rm -rf $Here/var
  rm $Here/ape0.ape
}
prep() { ##  # ensure all .ape files have .awk version
  for i in *.ape; do
    stem=$(basename "$i" ".ape")
    j="$Lib/${stem}.awk"
    if [ "$i" -nt "$j" ]; then
      echo "# $i ==> $j"
      cat "$i" | _ape2awk > "$j"
    fi
  done
} 
gitting() {
  git config --global credential.helper cache
  git config credential.helper 'cache --timeout=3600'
}
push() {
  gitting
  git status; git commit -am "commit"; git push
}
pull() {
  gitting
  git pull
}
###################################
# get all the configs (if any)

for dir in "$Var" "$Lib" "$Doc" "$Tmp"; do
  mkdir -p "$dir"; done

ape0

if [ -f "${1}.ape" ]; then
        run "$@"
elif [ `type -t $1`"" == 'function' ]; then
        f=$1
        shift
        $f "$@"
else
     help
fi

